from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, desc, delete
import logging

from bot.models.transactions import Transactions
from bot.database.database import get_session
from bot.keyboards.main_menu import main_menu_keyboard
from bot.keyboards.delete_transactions import delete_transactions_keyboard, \
    confirm_delete_keyboard

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("delete"))
@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
async def show_delete_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    try:
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = select(Transactions).where(
                Transactions.user_tg_id == message.from_user.id
            ).order_by(desc(Transactions.date)).limit(10)

            result = await session.execute(query)
            transactions = result.scalars().all()

            if not transactions:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    reply_markup=main_menu_keyboard()
                )
                return

            await message.answer(
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                reply_markup=delete_transactions_keyboard(transactions)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
            reply_markup=main_menu_keyboard()
        )


@router.callback_query(F.data.startswith("delete_transaction_"))
async def confirm_delete_transaction(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        transaction_id = int(callback.data.split("_")[-1])

        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            query = select(Transactions).where(
                Transactions.id == transaction_id,
                Transactions.user_tg_id == callback.from_user.id
            )
            result = await session.execute(query)
            transaction = result.scalar_one_or_none()

            if not transaction:
                await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            emoji = "üí∞" if transaction.type == "income" else "üí∏"
            sign = "+" if transaction.type == "income" else "-"
            transaction_info = (
                f"{emoji} {sign}{transaction.amount} —Ä—É–±.\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category}\n"
                f"üìÖ –î–∞—Ç–∞: {transaction.date.strftime('%d.%m.%Y %H:%M')}"
            )

            await callback.message.edit_text(
                f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?\n\n"
                f"{transaction_info}",
                reply_markup=confirm_delete_keyboard(transaction_id)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_transaction(callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        transaction_id = int(callback.data.split("_")[-1])

        async with get_session() as session:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            query = select(Transactions).where(
                Transactions.id == transaction_id,
                Transactions.user_tg_id == callback.from_user.id
            )
            result = await session.execute(query)
            transaction = result.scalar_one_or_none()

            if not transaction:
                await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            # –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            delete_query = delete(Transactions).where(
                Transactions.id == transaction_id,
                Transactions.user_tg_id == callback.from_user.id
            )
            await session.execute(delete_query)
            await session.commit()

            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–¥–∞–ª–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {transaction_id}")

            await callback.message.edit_text(
                f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                f"üí∏ {transaction.amount} —Ä—É–±. - {transaction.category}",
                reply_markup=None
            )

            await callback.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
    """
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
