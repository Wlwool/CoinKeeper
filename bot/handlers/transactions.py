from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import StateFilter, Command
from datetime import datetime, timezone

from bot.states.transactions import AddIncomeStates, AddExpenseStates
from bot.keyboards.main_menu import main_menu_keyboard
from bot.keyboards.cancel import cancel_keyboard
from bot.keyboards.categories import categories_keyboard
from bot.models.transactions import Transactions
from bot.database.database import get_session
from bot.utils.category_utils import get_user_categories
import logging

router = Router()
logger = logging.getLogger(__name__)


# == –î–û–•–û–î–´ ==

@router.message(F.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", StateFilter(None))
@router.message(Command("add_income"), StateFilter(None))
async def start_add_income(message: Message, state: FSMContext):
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddIncomeStates.amount)


@router.message(AddIncomeStates.amount)
async def process_income_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞."""
    try:
        amount = float(
            message.text.replace(",", "."))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(amount=amount)

        categories = await get_user_categories(message.from_user.id, "income")
        await message.answer(
            f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
            reply_markup=categories_keyboard(categories)
        )
        await state.set_state(AddIncomeStates.category)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50):")


@router.message(AddIncomeStates.category)
async def process_income_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î."""
    try:
        category = message.text
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        valid_categories = await get_user_categories(message.from_user.id, "income")
        if category not in valid_categories:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å'!")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_session() as session:
            transaction = Transactions(
                user_tg_id=message.from_user.id,
                amount=data['amount'],
                category=category,
                type="income",
                date=datetime.now(timezone.utc)
            )
            session.add(transaction)
            await session.commit()

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –¥–æ—Ö–æ–¥: {data['amount']} —Ä—É–±. ({category})")

        await message.answer(
            f"‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            f"üí∞ +{data['amount']} —Ä—É–±.\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu_keyboard()
        )
    finally:
        await state.clear()


# == –†–ê–°–•–û–î–´ ==

@router.message(F.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", StateFilter(None))
@router.message(Command("add_expense"), StateFilter(None))
async def start_add_expense(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AddExpenseStates.amount)


@router.message(AddExpenseStates.amount)
async def process_expense_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(amount=amount)

        categories = await get_user_categories(message.from_user.id, "expense")
        await message.answer(
            f"üí∏ –°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=categories_keyboard(categories)
        )
        await state.set_state(AddExpenseStates.category)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 500.75):")


@router.message(AddExpenseStates.category)
async def process_expense_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    try:
        category = message.text
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        valid_categories = await get_user_categories(message.from_user.id, "expense")
        if category not in valid_categories:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å'!")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_session() as session:
            transaction = Transactions(
                user_tg_id=message.from_user.id,
                amount=data['amount'],
                category=category,
                type="expense",
                date=datetime.now(timezone.utc)
            )
            session.add(transaction)
            await session.commit()

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ä–∞—Å—Ö–æ–¥: {data['amount']} —Ä—É–±. ({category})")

        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            f"üí∏ -{data['amount']} —Ä—É–±.\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu_keyboard()
        )
    finally:
        await state.clear()
