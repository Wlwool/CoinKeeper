from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select, desc
from datetime import datetime, timedelta, timezone
import logging
from bot.models.transactions import Transactions
from bot.database.database import get_session
from bot.keyboards.main_menu import main_menu_keyboard


router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("history"))
@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
async def show_history(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    """
    try:
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)

        async with get_session() as session:
            # –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            query = select(Transactions).where(
                Transactions.user_id == message.from_user.id,
                Transactions.date >= thirty_days_ago
            ).order_by(desc(Transactions.date))

            result = await session.execute(query)
            transactions = result.scalars().all()

            if not transactions:
                await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.", reply_markup=main_menu_keyboard()
                                     )
                return
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"

            # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
            transactions_by_date = {}
            for transaction in transactions:
                date_str = transaction.date.strftime("%d.%m.%Y")
                if date_str not in transactions_by_date:
                    transactions_by_date[date_str] = []
                transactions_by_date[date_str].append(transaction)

            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º
            for date_str, day_transactions in sorted(transactions_by_date.items(), reverse=True):
                history_text += f"üìÖ {date_str}:\n\n"

                for transaction in day_transactions:
                    emoji = "üí∞" if transaction.type == "income" else "üí∏"
                    sign = "+" if transaction.type == "income" else "-"
                    history_text += f"{emoji} {sign}{transaction.amount} —Ä—É–±. ‚Äî {transaction.category}\n"
                history_text += "\n"

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await message.answer(history_text, reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
                             reply_markup=main_menu_keyboard()
                             )
