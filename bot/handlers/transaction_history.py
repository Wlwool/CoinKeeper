import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, desc
from datetime import datetime, timedelta, timezone

from aiogram.fsm.context import FSMContext
from bot.states.transactions import AddIncomeStates, AddExpenseStates
from bot.models.transactions import Transactions
from bot.database.database import get_session
from bot.keyboards.main_menu import main_menu_keyboard, main_menu_inline_keyboard
from bot.keyboards.history import history_period_keyboard, history_stats_keyboard
from bot.keyboards.cancel import cancel_keyboard
from bot.keyboards.delete_transactions import delete_transactions_keyboard

router = Router()
logger = logging.getLogger(__name__)


def format_currency(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á"""
    return f"{amount:,.2f}".replace(",", " ").replace(".00", "")


async def get_transactions_for_period(user_tg_id: int, days: int = None) -> list[Transactions]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    Args:
        user_tg_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (None = –≤—Å–µ –≤—Ä–µ–º—è)

    Returns:
        list[Transactions]: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    async with get_session() as session:
        query = select(Transactions).where(
            Transactions.user_tg_id == user_tg_id
        )

        if days is not None:
            date_from = datetime.now(timezone.utc) - timedelta(days=days)
            query = query.where(Transactions.date >= date_from)

        query = query.order_by(desc(Transactions.date))

        result = await session.execute(query)
        return result.scalars().all()


def calculate_statistics(transactions: list[Transactions]) -> dict:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º"""
    total_income = sum(t.amount for t in transactions if t.type == "income")
    total_expense = sum(t.amount for t in transactions if t.type == "expense")
    balance = total_income - total_expense

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    income_by_category = {}
    expense_by_category = {}

    for transaction in transactions:
        if transaction.type == "income":
            income_by_category[transaction.category] = income_by_category.get(
                transaction.category, 0) + transaction.amount
        else:
            expense_by_category[transaction.category] = expense_by_category.get(
                transaction.category, 0) + transaction.amount

    return {
        "total_income": total_income,
        "total_expense": total_expense,
        "balance": balance,
        "income_by_category": income_by_category,
        "expense_by_category": expense_by_category,
        "transactions_count": len(transactions)
    }


def format_history_message(transactions: list[Transactions], period_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    if not transactions:
        return f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {period_text}\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    transactions_by_date = {}
    for transaction in transactions:
        date_str = transaction.date.strftime("%d.%m.%Y")
        if date_str not in transactions_by_date:
            transactions_by_date[date_str] = []
        transactions_by_date[date_str].append(transaction)

    message_parts = [f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {period_text}\n"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    sorted_dates = sorted(transactions_by_date.keys(), reverse=True)
    displayed_dates = sorted_dates[:10]

    for date_str in displayed_dates:
        day_transactions = transactions_by_date[date_str]
        message_parts.append(f"\nüìÖ {date_str}:")

        for transaction in day_transactions[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å
            emoji = "üí∞" if transaction.type == "income" else "üí∏"
            sign = "+" if transaction.type == "income" else "-"
            message_parts.append(
                f"{emoji} {sign}{format_currency(transaction.amount)} ‚ÇΩ ‚Äî {transaction.category}")

        if len(day_transactions) > 5:
            message_parts.append(f"   ... –∏ –µ—â—ë {len(day_transactions) - 5} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –Ω–µ –≤—Å–µ –¥–Ω–∏
    if len(sorted_dates) > 10:
        message_parts.append(f"\n... –∏ –µ—â—ë {len(sorted_dates) - 10} –¥–Ω–µ–π")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = calculate_statistics(transactions)
    message_parts.extend([
        "\n" + "=" * 30,
        f"üìà –î–æ—Ö–æ–¥—ã: +{format_currency(stats['total_income'])} ‚ÇΩ",
        f"üìâ –†–∞—Å—Ö–æ–¥—ã: -{format_currency(stats['total_expense'])} ‚ÇΩ",
        f"üí∞ –ò—Ç–æ–≥–æ: {'+' if stats['balance'] >= 0 else ''}{format_currency(stats['balance'])} ‚ÇΩ",
        f"üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats['transactions_count']}"
    ])

    return "\n".join(message_parts)


@router.message(Command("history"))
async def cmd_history(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –¥–Ω–µ–π
    –ü—Ä–∏–º–µ—Ä—ã: /history, /history 7, /history 30
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω—ã –ª–∏ –¥–Ω–∏ –≤ –∫–æ–º–∞–Ω–¥–µ
        command_parts = message.text.split()
        days = None

        if len(command_parts) > 1:
            try:
                days = int(command_parts[1])
                if days <= 0:
                    await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                    return
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/history - –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥\n"
                    "/history 7 - –∑–∞ 7 –¥–Ω–µ–π\n"
                    "/history 30 - –∑–∞ 30 –¥–Ω–µ–π"
                )
                return

        if days is None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            await message.answer(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                reply_markup=history_period_keyboard()
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            transactions = await get_transactions_for_period(message.from_user.id, days)
            period_text = f"–∑–∞ {days} –¥–Ω–µ–π" if days > 1 else "–∑–∞ 1 –¥–µ–Ω—å"

            history_text = format_history_message(transactions, period_text)
            await message.answer(
                history_text,
                reply_markup=history_stats_keyboard(str(days))
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
            reply_markup=main_menu_keyboard()
        )


@router.message(F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
async def show_history_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
        reply_markup=history_period_keyboard()
    )


@router.callback_query(F.data.startswith("history_"))
async def process_history_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        action = callback.data.split("_", 1)[1]

        if action == "cancel":
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_inline_keyboard()
            )
            await callback.answer()
            return

        if action == "choose_period":
            await callback.message.edit_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                reply_markup=history_period_keyboard()
            )
            await callback.answer()
            return

        if action == "main_menu":
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_inline_keyboard()
            )
            await callback.answer()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days_map = {
            "7": 7,
            "30": 30,
            "90": 90,
            "all": None
        }

        if action in days_map:
            days = days_map[action]
            transactions = await get_transactions_for_period(callback.from_user.id, days)

            if action == "all":
                period_text = "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
            else:
                period_text = f"–∑–∞ {action} –¥–Ω–µ–π"

            history_text = format_history_message(transactions, period_text)

            await callback.message.edit_text(
                history_text,
                reply_markup=history_stats_keyboard(action)
            )
            await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("main_"))
async def process_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        action = callback.data.split("_", 1)[1]

        if action == "history":
            await callback.message.edit_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                reply_markup=history_period_keyboard()
            )
        elif action == "add_income":
            # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
            await callback.message.delete()
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
                reply_markup=cancel_keyboard()
            )
            await state.set_state(AddIncomeStates.amount)
        elif action == "add_expense":
            # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
            await callback.message.delete()
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text="üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
                reply_markup=cancel_keyboard()
            )
            await state.set_state(AddExpenseStates.amount)
        elif action == "delete":

            async with get_session() as session:
                query = select(Transactions).where(
                    Transactions.user_tg_id == callback.from_user.id
                ).order_by(desc(Transactions.date)).limit(10)

                result = await session.execute(query)
                transactions = result.scalars().all()

                if not transactions:
                    await callback.message.edit_text(
                        "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                        reply_markup=main_menu_inline_keyboard()
                    )
                    return

                await callback.message.edit_text(
                    "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                    "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                    reply_markup=delete_transactions_keyboard(transactions)
                )

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("stats_"))
async def show_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        period = callback.data.split("_", 1)[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days_map = {"7": 7, "30": 30, "90": 90, "all": None}
        days = days_map.get(period)

        transactions = await get_transactions_for_period(callback.from_user.id, days)
        stats = calculate_statistics(transactions)

        if not transactions:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        period_text = f"–∑–∞ {period} –¥–Ω–µ–π" if period != "all" else "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"

        stats_parts = [
            f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text}\n",
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {'+' if stats['balance'] >= 0 else ''}{format_currency(stats['balance'])} ‚ÇΩ",
            f"üìà –î–æ—Ö–æ–¥—ã: +{format_currency(stats['total_income'])} ‚ÇΩ",
            f"üìâ –†–∞—Å—Ö–æ–¥—ã: -{format_currency(stats['total_expense'])} ‚ÇΩ",
            f"üìä –û–ø–µ—Ä–∞—Ü–∏–π: {stats['transactions_count']}\n"
        ]

        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
        if stats['income_by_category']:
            stats_parts.append("üí∞ –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            sorted_income = sorted(stats['income_by_category'].items(),
                                   key=lambda x: x[1], reverse=True)
            for category, amount in sorted_income[:5]:
                stats_parts.append(f"  ‚Ä¢ {category}: +{format_currency(amount)} ‚ÇΩ")
            if len(sorted_income) > 5:
                stats_parts.append(f"  ... –∏ –µ—â—ë {len(sorted_income) - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            stats_parts.append("")

        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        if stats['expense_by_category']:
            stats_parts.append("üí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            sorted_expenses = sorted(stats['expense_by_category'].items(),
                                     key=lambda x: x[1], reverse=True)
            for category, amount in sorted_expenses[:5]:
                stats_parts.append(f"  ‚Ä¢ {category}: -{format_currency(amount)} ‚ÇΩ")
            if len(sorted_expenses) > 5:
                stats_parts.append(f"  ... –∏ –µ—â—ë {len(sorted_expenses) - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        await callback.message.edit_text(
            "\n".join(stats_parts),
            reply_markup=history_stats_keyboard(period)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)